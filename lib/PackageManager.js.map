{"version":3,"sources":["../src/PackageManager.js"],"names":["PackageManager","packageServer","localPackagesPath","_ensureLocalPackages","localRepository","sourceRepository","dependencyCache","id","version","ignoreDependencies","_installPackageAndDependencies","_installPackage","forceRemove","removeDependencies","undefined","_isInstalledPackageDependent","console","log","path","exists","_removePackageAndDependencies","_removePackage","delete","showPrerelease","findPackage","oldPackage","newPackage","equalTo","Version","uninstallPackage","installPackage","ver","installedPackage","greaterOrEqualTo","createFolderSync","downloadPath","uri","downloadFile","destPath","zip","extractAllTo","file","data","zipEntries","getEntries","forEach","zipEntry","entryName","getData","toString","e","read","cacheKey","_getName","get","deps","tmpPath","_downloadPackage","mspec","_readMpkgPackageFile","_cleanupFile","fromMspec","dependencies","set","isInstalled","pkgPath","_extractPackage","_getPackageDependencies","i","length","getPackages","installedPackages","includes"],"mappings":"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","file":"PackageManager.js","sourcesContent":["import http from \"./sys/http\"\nimport files from \"./sys/files\"\nimport Zip from \"adm-zip\"\n\nimport LocalRepository from \"./LocalRepository\"\nimport SourceRepository from \"./SourceRepository\"\nimport PackageRef from \"./PackageRef\"\nimport DependencyCache from \"./DependencyCache\"\nimport SemanticVersion from \"./SemanticVersion\"\n\nexport default class PackageManager {\n\n  constructor(packageServer) {\n    this.packageServer = packageServer;\n    this.localPackagesPath = \"./packages\";\n    this._ensureLocalPackages();\n\n    this.localRepository = new LocalRepository(this.localPackagesPath);\n    this.sourceRepository = new SourceRepository(packageServer);\n    this.dependencyCache = new DependencyCache();\n  }\n\n  async installPackage(id, version, ignoreDependencies) {\n    \n    if (!ignoreDependencies) {\n      await this._installPackageAndDependencies(id, version);\n    }\n    else {\n      await this._installPackage(id, version);\n    }\n  }\n\n  /**\n   * Uninstall a package\n   * @param {string} id id of package to remove \n   * @param {bool} [forceRemove] remove package even if it's a dependency (default=false)\n   * @param {bool} [removeDependencies] remove package's dependencies (default=true)\n   */\n  async uninstallPackage(id, forceRemove, removeDependencies) {\n\n    if (forceRemove === undefined) forceRemove = false;\n    if (removeDependencies === undefined) removeDependencies = true;\n\n    // see if we are a dependent\n    if (!forceRemove && await this._isInstalledPackageDependent(id)) {\n      console.log(`package ${id} was not removed because it's a dependent, try forceRemove`);\n      return;\n    }\n\n    // see if the package is installed\n    let path = `${this.localPackagesPath}/${id}`;\n    if (await files.exists(path) == false) {\n      console.log(`package ${id} was not removed because it's not installed`);\n      return;\n    }\n\n    // should we remove dependencies\n    if (removeDependencies) {\n      await this._removePackageAndDependencies(id);\n    }\n    else {\n      await this._removePackage(id);\n    }\n\n    await files.delete(path);\n  }\n\n  async updatePackage(id, ignoreDependencies, showPrerelease) {\n\n    // for now we just delete the current one and install the new one\n    // but at some point we need to walk the dependency list\n    // and update them\n\n    let oldPackage = await this.localRepository.findPackage(id);\n    if (!oldPackage) {\n      throw \"the package to update is not installed\"\n    }\n\n    let newPackage = this.sourceRepository.findPackage(id);\n    if (newPackage && !oldPackage.version.equalTo(newPackage.Version)) {\n\n      await this.uninstallPackage(id);\n      await this.installPackage(id);\n    }\n  }\n\n  async isInstalled(id, version) {\n    const ver = version != null ? new SemanticVersion(version) : null;\n    var installedPackage = await this.localRepository.findPackage(id);\n    if (installedPackage != null) {\n      if (ver != null && installedPackage.version.greaterOrEqualTo(ver)) {\n        return true;\t\n      }\n      else if (ver == null) {\n        return true;\n      }\n    }\n  }\n\n  _ensureLocalPackages() {\n    files.createFolderSync(this.localPackagesPath);\n    files.createFolderSync(this.localPackagesPath + \"/cache\");\n  }\n\n  _getName(id, version) {\n    if (version !== undefined)\n      return id + \"-\" + version;\n    return id;\n  }\n\n  async _downloadPackage(id, version, downloadPath) {\n    console.log(`downloading package ${id}-${version}`)\n\n    let uri = `http://${this.packageServer}/api/v2/package/${id}`;\n    if (version !== undefined) {\n      uri += \"/\" + version;\n    }\n\n    let path = await http.downloadFile(uri, downloadPath);\n    if (await files.exists(path) == false) {\n      throw \"the package '${this._getName(id, version)}' could not be downloaded\"\n    }\n\n    return path;\n  }\n\n  _extractPackage(path, destPath) {\n    let zip = new Zip(path);\n    zip.extractAllTo(destPath, true);\n  }\n\n  async _cleanupFile(path) {\n    await files.delete(path);\n  }\n\n  /**\n   * Reads a file from an .mpkg package (not installed)\n   * @param {string} path path to .mpkg package file\n   * @param {string} file name of file to read\n   * @return {string} contents of file or null if file was not found\n   */\n  _readMpkgPackageFile(path, file) {\n    try {\n      let data = null;\n      let zip = new Zip(path);\n      let zipEntries = zip.getEntries();\n      zipEntries.forEach(function(zipEntry) {\n        //console.log(zipEntry.entryName);\n        if (zipEntry.entryName == file) {\n            data = zipEntry.getData().toString('utf8'); \n        }\n      });\n      return data;\n    }\n    catch (e) {\n      throw `cannot read package for '${path}:${file}': ${e}`\n    }\n  }\n\n  /**\n   * Reads a file from an installed package\n   * @param {string} id id of package\n   * @param {string} file name of file to read\n   * @return {string} contents of file or null if file was not found\n   */\n  async _readInstalledPackageFile(id, file) {\n    try {\n      let data = null;\n      let installedPackage = await this.localRepository.findPackage(id);\n      if (!installedPackage) {\n        data = await files.read(`${this.localPackagesPath}/${id}/${file}`)\n      }\n      return data;\n    }\n    catch (e) {\n      throw `cannot read installed package for '${id}:${file}': ${e}`\n    }\n  }\n\n  async _getPackageDependencies(id, version) {\n    try {\n      // check cache\n      let cacheKey = this._getName(id, version);\n      let deps = await this.dependencyCache.get(cacheKey);\n      // TODO dependency cache has issues because of no versions\n      // just disable it until fixed\n      if (true || !deps) {\n        //console.log(`- dependency cache MISS: ${cacheKey}`)\n        deps = [];\n        let tmpPath = `${this.localPackagesPath}/tmp-${id}-${version}.mpkg`;\n        let path = await this._downloadPackage(id, version, tmpPath);\n        let mspec = this._readMpkgPackageFile(tmpPath, `${id}.mspec`);\n        await this._cleanupFile(tmpPath);\n        if (mspec) {\n          deps = (await PackageRef.fromMspec(mspec)).dependencies;\n          await this.dependencyCache.set(cacheKey, deps);\n        }\n      }\n      //else console.log(`- dependency cache HIT: ${id}`)\n      return deps;\n    }\n    catch (e) {\n      throw `cannot get dependencies for '${this._getName(id, version)}': ${e}`\n    }\n  }\n\n  async _getInstalledPackageDependencies(id) {\n    try {\n      let installedPackage = await this.localRepository.findPackage(id);\n      if (!installedPackage) {\n        return installedPackage.dependencies;\n      }\n      return [];\n    }\n    catch (e) {\n      throw `cannot get dependencies for installed package '${this._getName(id, version)}': ${e}`\n    }\n  }\n\n  async _installPackage(id, version) {\n    console.log(`installing: ${this._getName(id, version)}`)\n\n    if (version && await this.isInstalled(id, version)) {\n      console.log(`- already installed`);\n      return;\n    }\n\n    let tmpPath = `${this.localPackagesPath}/downloaded.mpkg`;\n    let pkgPath = `${this.localPackagesPath}/${id}`;\n\n    let path = await this._downloadPackage(id, version, tmpPath);\n    this._extractPackage(path, pkgPath);\n    await this._cleanupFile(tmpPath);\n  }\n\n  async _installPackageAndDependencies(id, version) {\n    try {\n      let deps = await this._getPackageDependencies(id, version);\n      for (var i=0; i<deps.length; i++) {\n        await this._installPackageAndDependencies(deps[i]);\n      }\n      await this._installPackage(id, version);\n    }\n    catch (e) {\n      throw `cannot install dependencies for '${this._getName(id, version)}': ${e}`\n    }\n  }\n\n  async _removePackage(id) {\n    console.log(`removing: ${this._getName(id)}`)\n    let path = `${this.localPackagesPath}/${id}`;\n    await files.delete(path);\n  }\n\n  async _removePackageAndDependencies(id) {\n    try {\n      let installedPackage = await this.localRepository.findPackage(id);\n      if (installedPackage) {\n        let deps = installedPackage.dependencies;\n        for (var i=0; i<deps.length; i++) {\n          await this._removePackageAndDependencies(deps[i]);\n        }\n        await this._removePackage(id);\n      }\n    }\n    catch (e) {\n      throw `cannot remove dependencies for '${this._getName(id, version)}': ${e}`\n    }\n  }\n\n  async _isInstalledPackageDependent(id) {\n    try {\n      // get all installed packages\n      let installedPackages = await this.localRepository.getPackages();\n\n      // loop through and check if our id is a dependent\n      for (var i=0; i<installedPackages.length; i++) {\n        if (installedPackages[i].dependencies.includes(id))\n          return true;\n      }\n      return false;\n    }\n    catch (e) {\n      throw `cannot check if package is dependent for '${id}': ${e}`\n    }\n  }\n}"]}