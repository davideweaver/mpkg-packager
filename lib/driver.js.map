{"version":3,"sources":["../src/driver.js"],"names":["ok","packager","installPackage","uninstallPackage","listInstalled","console","log","run","getInstalledPackages","installed","map","p","id","version","toString","dependencies"],"mappings":";;;;;;;;uDAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDA,cAFC,GAEI,KAFJ;AAGDC,oBAHC,GAGU,uBAAa,sBAAb,CAHV;;AAKL;;AALK;AAAA,mBAOMA,SAASC,cAAT,CAAwB,gBAAxB,CAPN;;AAAA;AAOLF,cAPK;AAAA;AAAA,mBAQMC,SAASE,gBAAT,CAA0B,gBAA1B,CARN;;AAAA;AAQLH,cARK;AAAA;AAAA,mBA2BCI,cAAcH,QAAd,CA3BD;;AAAA;;AA6BLI,oBAAQC,GAAR,CAAY,MAAZ,EAAoBN,EAApB;;AA7BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,G;;;;;;wDAiCtB,kBAA6BN,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACEI,oBAAQC,GAAR,CAAY,eAAZ;AADF;AAAA,mBAEwBL,SAASO,oBAAT,EAFxB;;AAAA;AAEMC,qBAFN;;AAGEA,sBAAUC,GAAV,CAAc,aAAK;AACjBL,sBAAQC,GAAR,CAAYK,EAAEC,EAAd,EAAkBD,EAAEE,OAAF,CAAUC,QAAV,EAAlB,EAAwCH,EAAEI,YAA1C;AACD,aAFD;AAGAV,oBAAQC,GAAR,CAAY,eAAZ;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeF,a;;;;;AAnCf","file":"driver.js","sourcesContent":["import Packager from \"./Packager\"\n\nexport async function run() { \n\n  let ok = false;\n  let packager = new Packager(\"packages.nolinio.com\");\n\n  //ok = await packager.packageManager.sourceRepository.findPackage(\"berktek-app\")\n\n  ok = await packager.installPackage(\"azure-demo-app\")\n  ok = await packager.uninstallPackage(\"azure-demo-app\");\n  //ok = await packager.uninstallPackage(\"azure-demo-azureappres\");\n\n  //ok = await packager.installPackage(\"berktek-app\", \"51.1\")\n\n  //ok = await packager.installPackage(\"azure-demo-app\")\n\n  //ok = await packager.updatePackage(\"berktek-app\")\n\n  //ok = await packager.isUpdateAvailable(\"azure-demo-casestudies\");\n\n  //ok = await packager.getInstalledPackage(\"azure-demo-casestudies\");\n\n  //ok = await packager.getLatestVersion(\"berktek-app\")\n\n  //ok = await packager.getAvailablePackagesByKeywords(\"berktek\");\n\n  //ok = await packager.getAvailablePackagesByFilter(\"(substringof('berktek',Id) and substringof('app',Id)) and IsLatestVersion eq true\");\n\n  await listInstalled(packager);\n\n  console.log(\"done\", ok);\n\n}\n\nasync function listInstalled(packager) {\n  console.log(\"--installed--\")\n  let installed = await packager.getInstalledPackages();\n  installed.map(p => {\n    console.log(p.id, p.version.toString(), p.dependencies);\n  })\n  console.log(\"-------------\")\n}\n"]}