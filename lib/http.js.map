{"version":3,"sources":["../src/http.js"],"names":["http","request","body","downloadFile","uri","localFilePath","Promise","resolve","reject","file","createWriteStream","on","close","get","err","pipe"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO;AACXC,WAAS,uBAAQ;AACf,WAAO,oCAAeC,IAAf,CAAP;AACD,GAHU;AAIXC,gBAAc,sBAACC,GAAD,EAAMC,aAAN,EAAwB;AACpC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,UAAIC,OAAO,aAAGC,iBAAH,CAAqBL,aAArB,CAAX;AACAI,WAAKE,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACpBF,aAAKG,KAAL,CAAW,YAAM;AACfL,kBAAQF,aAAR;AACD,SAFD;AAGD,OAJH;;AAMA,wBACGQ,GADH,CACOT,GADP,EAEGO,EAFH,CAEM,OAFN,EAEe,UAASG,GAAT,EAAc;AACzBN,eAAOM,GAAP;AACD,OAJH,EAKGC,IALH,CAKQN,IALR;AAMD,KAfM,CAAP;AAgBD;AArBU,CAAb;;kBAwBeT,I","file":"http.js","sourcesContent":["import request from \"request\"\nimport requestPromise from \"request-promise-native\"\nimport fs from \"fs\"\n\nconst http = {\n  request: body => {\n    return requestPromise(body);\n  },\n  downloadFile: (uri, localFilePath) => {\n    return new Promise((resolve, reject) => {\n\n      var file = fs.createWriteStream(localFilePath);\n      file.on(\"finish\", () => { \n          file.close(() => {\n            resolve(localFilePath)\n          })\n        });\n\n      request\n        .get(uri)\n        .on(\"error\", function(err) {\n          reject(err)\n        })\n        .pipe(file)\n    })\n  }\n}\n\nexport default http;"]}